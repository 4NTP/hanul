generator client {
  provider = "prisma-client-js"
  output   = "../apps/server/src/generated/prisma"
}

generator zod {
  provider = "pnpx zod-prisma-types"
  output   = "../apps/server/src/generated/prisma/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]
}

model Chat {
  id        String        @id @default(uuid()) @db.Uuid
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String        @db.Uuid
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  histories ChatHistory[]
  SubAgents SubAgent[]
}

model ChatHistory {
  id         String   @id @default(uuid()) @db.Uuid
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String   @db.Uuid
  role       String
  content    String
  toolCallId String?
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SubAgent {
  id              String                  @id @default(uuid()) @db.Uuid
  name            String?                 @unique
  prompt          String
  chat            Chat                    @relation(fields: [chatId], references: [id])
  chatId          String                  @db.Uuid
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  updateHistories SubAgentUpdateHistory[]
}

model SubAgentUpdateHistory {
  id         String   @id @default(uuid()) @db.Uuid
  subAgent   SubAgent @relation(fields: [subAgentId], references: [id], onDelete: Cascade)
  subAgentId String   @db.Uuid
  oldPrompt  String
  createdAt  DateTime @default(now())
}
